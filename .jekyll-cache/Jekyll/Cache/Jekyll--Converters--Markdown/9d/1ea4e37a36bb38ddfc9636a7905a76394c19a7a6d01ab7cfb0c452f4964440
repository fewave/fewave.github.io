I"ʚ<h2 id="前言">前言</h2>
<hr />
<p>SQL (Structured Query Language) 是具有数据操纵和数据定义等多种功能的数据库语言，这种语言具有交互性特点，能为用户提供极大的便利，数据库管理系统应充分利用SQL语言提高计算机应用系统的工作质量与效率。</p>

<p>身边很多人工作中经常和SQL打交道, 可是每人的编写SQL风格都独树一帜。</p>

<p>刚好在githup上看到一个不错的编码风格, 在这里给大家推荐一下。</p>
<blockquote>
  <p><a href="https://github.com/mattm/sql-style-guide">mattm/sql-style-guide</a></p>
</blockquote>

<h2 id="介绍">介绍</h2>
<hr />
<h3 id="使用小写的sql">使用小写的SQL</h3>
<p>小写SQL比大写SQL易读，而且不必一直按住shift键。</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="c1">-- Good</span>
<span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">users</span>

<span class="c1">-- Bad</span>
<span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">users</span>

<span class="c1">-- Bad</span>
<span class="k">Select</span> <span class="o">*</span> <span class="k">From</span> <span class="n">users</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="单行查询vs多行查询">单行查询vs多行查询</h3>
<p>以下情况最好将SQL写在同一行中:</p>
<ul>
  <li>查询所有列(*)或者只查询1列或者两列</li>
  <li>查询语句没有额外复杂性</li>
</ul>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="c1">-- Good</span>
<span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">users</span>

<span class="c1">-- Good</span>
<span class="k">select</span> <span class="n">id</span> <span class="k">from</span> <span class="n">users</span>

<span class="c1">-- Good</span>
<span class="k">select</span> <span class="n">id</span><span class="p">,</span> <span class="n">email</span> <span class="k">from</span> <span class="n">users</span>

<span class="c1">-- Good</span>
<span class="k">select</span> <span class="k">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">from</span> <span class="n">users</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>这样做的原因很简单，当所有内容都在一行时，仍然很容易阅读。但一旦你开始添加更多的列或更复杂的代码，如果是多行代码就更容易阅读:</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="c1">-- Good</span>
<span class="k">select</span>
    <span class="n">id</span><span class="p">,</span>
    <span class="n">email</span><span class="p">,</span>
    <span class="n">created_at</span>
<span class="k">from</span> <span class="n">users</span>

<span class="c1">-- Good</span>
<span class="k">select</span> <span class="o">*</span>
<span class="k">from</span> <span class="n">users</span>
<span class="k">where</span> <span class="n">email</span> <span class="o">=</span> <span class="s1">'example@domain.com
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>对于具有1或2列的查询，可以将这些列放在同一行上。对于3+列，将每个列名放在它自己的行上，包括第一项:</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
</pre></td><td class="rouge-code"><pre><span class="c1">-- Good</span>
<span class="k">select</span> <span class="n">id</span><span class="p">,</span> <span class="n">email</span>
<span class="k">from</span> <span class="n">users</span>
<span class="k">where</span> <span class="n">email</span> <span class="k">like</span> <span class="s1">'%@gmail.com'</span>

<span class="c1">-- Good</span>
<span class="k">select</span> <span class="n">user_id</span><span class="p">,</span> <span class="k">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">as</span> <span class="n">total_charges</span>
<span class="k">from</span> <span class="n">charges</span>
<span class="k">group</span> <span class="k">by</span> <span class="n">user_id</span>

<span class="c1">-- Good</span>
<span class="k">select</span>
    <span class="n">id</span><span class="p">,</span>
    <span class="n">email</span><span class="p">,</span>
    <span class="n">created_at</span>
<span class="k">from</span> <span class="n">users</span>

<span class="c1">-- Bad</span>
<span class="k">select</span> <span class="n">id</span><span class="p">,</span> <span class="n">email</span><span class="p">,</span> <span class="n">created_at</span>
<span class="k">from</span> <span class="n">users</span>

<span class="c1">-- Bad</span>
<span class="k">select</span> <span class="n">id</span><span class="p">,</span>
    <span class="n">email</span>
<span class="k">from</span> <span class="n">users</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="向左对齐">向左对齐</h3>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="c1">-- Good</span>
<span class="k">select</span> <span class="n">id</span><span class="p">,</span> <span class="n">email</span>
<span class="k">from</span> <span class="n">users</span>
<span class="k">where</span> <span class="n">email</span> <span class="k">like</span> <span class="s1">'%@gmail.com'</span>

<span class="c1">-- Bad</span>
<span class="k">select</span> <span class="n">id</span><span class="p">,</span> <span class="n">email</span>
  <span class="k">from</span> <span class="n">users</span>
 <span class="k">where</span> <span class="n">email</span> <span class="k">like</span> <span class="s1">'%@gmail.com'</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="使用单引号">使用单引号</h3>
<p>一些SQL方言，如BigQuery支持使用双引号，但是对于大多数方言，双引号最终将引用列名。因此，单引号更可取:</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="c1">-- Good</span>
<span class="k">select</span> <span class="o">*</span>
<span class="k">from</span> <span class="n">users</span>
<span class="k">where</span> <span class="n">email</span> <span class="o">=</span> <span class="s1">'example@domain.com'</span>

<span class="c1">-- Bad</span>
<span class="k">select</span> <span class="o">*</span>
<span class="k">from</span> <span class="n">users</span>
<span class="k">where</span> <span class="n">email</span> <span class="o">=</span> <span class="nv">"example@domain.com"</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="使用--而不用-">使用 <code class="highlighter-rouge">!=</code> 而不用 <code class="highlighter-rouge">&lt;&gt;</code></h3>
<p>因为!=读起来像“不等于”，更接近我们大声说出来的方式。</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="c1">-- Good</span>
<span class="k">select</span> <span class="k">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">as</span> <span class="n">paying_users_count</span>
<span class="k">from</span> <span class="n">users</span>
<span class="k">where</span> <span class="n">plan_name</span> <span class="o">!=</span> <span class="s1">'free'</span>

<span class="c1">-- Bad</span>
<span class="k">select</span> <span class="k">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">as</span> <span class="n">paying_users_count</span>
<span class="k">from</span> <span class="n">users</span>
<span class="k">where</span> <span class="n">plan_name</span> <span class="o">&lt;&gt;</span> <span class="s1">'free'</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="逗号应该放在行尾">逗号应该放在行尾</h3>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="c1">-- Good</span>
<span class="k">select</span>
    <span class="n">id</span><span class="p">,</span>
    <span class="n">email</span>
<span class="k">from</span> <span class="n">users</span>

<span class="c1">-- Bad</span>
<span class="k">select</span>
    <span class="n">id</span>
    <span class="p">,</span> <span class="n">email</span>
<span class="k">from</span> <span class="n">users</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="缩进条件">缩进条件</h3>
<p>当只有一个where条件时，将它保留在与<code class="highlighter-rouge">where</code>相同的行上:</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="k">select</span> <span class="n">email</span>
<span class="k">from</span> <span class="n">users</span>
<span class="k">where</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">1234</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>当有多个缩进时，将每个缩进比where更深一层。将逻辑运算符放在前一个条件的末尾:</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="k">select</span> <span class="n">id</span><span class="p">,</span> <span class="n">email</span>
<span class="k">from</span> <span class="n">users</span>
<span class="k">where</span> 
    <span class="n">created_at</span> <span class="o">&gt;=</span> <span class="s1">'2019-03-01'</span> <span class="k">and</span> 
    <span class="n">vertical</span> <span class="o">=</span> <span class="s1">'work'</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="避免括号内的空格">避免括号内的空格</h3>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="c1">-- Good</span>
<span class="k">select</span> <span class="o">*</span>
<span class="k">from</span> <span class="n">users</span>
<span class="k">where</span> <span class="n">id</span> <span class="k">in</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>

<span class="c1">-- Bad</span>
<span class="k">select</span> <span class="o">*</span>
<span class="k">from</span> <span class="n">users</span>
<span class="k">where</span> <span class="n">id</span> <span class="k">in</span> <span class="p">(</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span> <span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="将in值的长列表分成多个缩进行">将<code class="highlighter-rouge">in</code>值的长列表分成多个缩进行</h3>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="c1">-- Good</span>
<span class="k">select</span> <span class="o">*</span>
<span class="k">from</span> <span class="n">users</span>
<span class="k">where</span> <span class="n">email</span> <span class="k">in</span> <span class="p">(</span>
    <span class="s1">'user-1@example.com'</span><span class="p">,</span>
    <span class="s1">'user-2@example.com'</span><span class="p">,</span>
    <span class="s1">'user-3@example.com'</span><span class="p">,</span>
    <span class="s1">'user-4@example.com'</span>
<span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="表名应该是名词的复数形式">表名应该是名词的复数形式</h3>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="c1">-- Good</span>
<span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">users</span>
<span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">visit_logs</span>

<span class="c1">-- Bad</span>
<span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="k">user</span>
<span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">visitLog</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="列名应该是xxx_xxx格式">列名应该是xxx_xxx格式</h3>
<p>– Good
select
    id,
    email,
    timestamp_trunc(created_at, month) as signup_month
from users</p>

<p>– Bad
select
    id,
    email,
    timestamp_trunc(created_at, month) as SignupMonth
from users</p>

<h3 id="列名的约定">列名的约定</h3>
<ul>
  <li>布尔字段的前缀应该是is_、has_或does_。例如，is_customer、has_unsubscribe等。</li>
  <li>仅限日期的字段应该以_date作为后缀。例如,report_date。</li>
  <li>Date+time字段应该以_at作为后缀。例如，created_at、posted_at等。</li>
</ul>

<h3 id="列排序约定">列排序约定</h3>
<p>首先放置主键，然后是外键，然后是所有其他列。如果表中有任何系统列(created_at、updated_at、is_deleted等)，那么将它们放在最后。</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="c1">-- Good</span>
<span class="k">select</span>
    <span class="n">id</span><span class="p">,</span>
    <span class="n">name</span><span class="p">,</span>
    <span class="n">created_at</span>
<span class="k">from</span> <span class="n">users</span>

<span class="c1">-- Bad</span>
<span class="k">select</span>
    <span class="n">created_at</span><span class="p">,</span>
    <span class="n">name</span><span class="p">,</span>
    <span class="n">id</span><span class="p">,</span>
<span class="k">from</span> <span class="n">users</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="inner-join-处理"><code class="highlighter-rouge">inner join</code> 处理</h3>
<p>最好显式，以便连接类型非常清楚:</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="c1">-- Good</span>
<span class="k">select</span>
    <span class="n">email</span><span class="p">,</span>
    <span class="k">sum</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span> <span class="k">as</span> <span class="n">total_revenue</span>
<span class="k">from</span> <span class="n">users</span>
<span class="k">inner</span> <span class="k">join</span> <span class="n">charges</span> <span class="k">on</span> <span class="n">users</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">charges</span><span class="p">.</span><span class="n">user_id</span>

<span class="c1">-- Bad</span>
<span class="k">select</span>
    <span class="n">email</span><span class="p">,</span>
    <span class="k">sum</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span> <span class="k">as</span> <span class="n">total_revenue</span>
<span class="k">from</span> <span class="n">users</span>
<span class="k">join</span> <span class="n">charges</span> <span class="k">on</span> <span class="n">users</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">charges</span><span class="p">.</span><span class="n">user_id</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="对于join条件将首先引用的表放在on之后">对于<code class="highlighter-rouge">join</code>条件，将首先引用的表放在<code class="highlighter-rouge">on</code>之后</h3>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="c1">-- Good</span>
<span class="k">select</span>
    <span class="p">...</span>
<span class="k">from</span> <span class="n">users</span>
<span class="k">left</span> <span class="k">join</span> <span class="n">charges</span> <span class="k">on</span> <span class="n">users</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">charges</span><span class="p">.</span><span class="n">user_id</span>
<span class="c1">-- primary_key = foreign_key --&gt; one-to-many --&gt; fanout</span>
  
<span class="k">select</span>
    <span class="p">...</span>
<span class="k">from</span> <span class="n">charges</span>
<span class="k">left</span> <span class="k">join</span> <span class="n">users</span> <span class="k">on</span> <span class="n">charges</span><span class="p">.</span><span class="n">user_id</span> <span class="o">=</span> <span class="n">users</span><span class="p">.</span><span class="n">id</span>
<span class="c1">-- foreign_key = primary_key --&gt; many-to-one --&gt; no fanout</span>

<span class="c1">-- Bad</span>
<span class="k">select</span>
    <span class="p">...</span>
<span class="k">from</span> <span class="n">users</span>
<span class="k">left</span> <span class="k">join</span> <span class="n">charges</span> <span class="k">on</span> <span class="n">charges</span><span class="p">.</span><span class="n">user_id</span> <span class="o">=</span> <span class="n">users</span><span class="p">.</span><span class="n">id</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="单个连接条件应该与连接位于同一行">单个连接条件应该与连接位于同一行</h3>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="c1">-- Good</span>
<span class="k">select</span>
    <span class="n">email</span><span class="p">,</span>
    <span class="k">sum</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span> <span class="k">as</span> <span class="n">total_revenue</span>
<span class="k">from</span> <span class="n">users</span>
<span class="k">inner</span> <span class="k">join</span> <span class="n">charges</span> <span class="k">on</span> <span class="n">users</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">charges</span><span class="p">.</span><span class="n">user_id</span>
<span class="k">group</span> <span class="k">by</span> <span class="n">email</span>

<span class="c1">-- Bad</span>
<span class="k">select</span>
    <span class="n">email</span><span class="p">,</span>
    <span class="k">sum</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span> <span class="k">as</span> <span class="n">total_revenue</span>
<span class="k">from</span> <span class="n">users</span>
<span class="k">inner</span> <span class="k">join</span> <span class="n">charges</span>
<span class="k">on</span> <span class="n">users</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">charges</span><span class="p">.</span><span class="n">user_id</span>
<span class="k">group</span> <span class="k">by</span> <span class="n">email</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>当你有多个连接条件时，把它们放在各自的缩进行:</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="c1">-- Good</span>
<span class="k">select</span>
    <span class="n">email</span><span class="p">,</span>
    <span class="k">sum</span><span class="p">(</span><span class="n">amount</span><span class="p">)</span> <span class="k">as</span> <span class="n">total_revenue</span>
<span class="k">from</span> <span class="n">users</span>
<span class="k">inner</span> <span class="k">join</span> <span class="n">charges</span> <span class="k">on</span> 
    <span class="n">users</span><span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">charges</span><span class="p">.</span><span class="n">user_id</span> <span class="k">and</span>
    <span class="n">refunded</span> <span class="o">=</span> <span class="k">false</span>
<span class="k">group</span> <span class="k">by</span> <span class="n">email</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="除非必要否则不要包含表名">除非必要，否则不要包含表名</h3>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="c1">-- Good</span>
<span class="k">select</span>
    <span class="n">id</span><span class="p">,</span>
    <span class="n">name</span>
<span class="k">from</span> <span class="n">companies</span>

<span class="c1">-- Bad</span>
<span class="k">select</span>
    <span class="n">companies</span><span class="p">.</span><span class="n">id</span><span class="p">,</span>
    <span class="n">companies</span><span class="p">.</span><span class="n">name</span>
<span class="k">from</span> <span class="n">companies</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="始终重命名聚合和函数包装的参数">始终重命名聚合和函数包装的参数</h3>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="c1">-- Good</span>
<span class="k">select</span> <span class="k">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">as</span> <span class="n">total_users</span>
<span class="k">from</span> <span class="n">users</span>

<span class="c1">-- Bad</span>
<span class="k">select</span> <span class="k">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span>
<span class="k">from</span> <span class="n">users</span>

<span class="c1">-- Good</span>
<span class="k">select</span> <span class="n">timestamp_millis</span><span class="p">(</span><span class="n">property_beacon_interest</span><span class="p">)</span> <span class="k">as</span> <span class="n">expressed_interest_at</span>
<span class="k">from</span> <span class="n">hubspot</span><span class="p">.</span><span class="n">contact</span>
<span class="k">where</span> <span class="n">property_beacon_interest</span> <span class="k">is</span> <span class="k">not</span> <span class="k">null</span>

<span class="c1">-- Bad</span>
<span class="k">select</span> <span class="n">timestamp_millis</span><span class="p">(</span><span class="n">property_beacon_interest</span><span class="p">)</span>
<span class="k">from</span> <span class="n">hubspot</span><span class="p">.</span><span class="n">contact</span>
<span class="k">where</span> <span class="n">property_beacon_interest</span> <span class="k">is</span> <span class="k">not</span> <span class="k">null</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="在布尔条件需显示写出">在布尔条件需显示写出</h3>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="c1">-- Good</span>
<span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">customers</span> <span class="k">where</span> <span class="n">is_cancelled</span> <span class="o">=</span> <span class="k">true</span>
<span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">customers</span> <span class="k">where</span> <span class="n">is_cancelled</span> <span class="o">=</span> <span class="k">false</span>

<span class="c1">-- Bad</span>
<span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">customers</span> <span class="k">where</span> <span class="n">is_cancelled</span>
<span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">customers</span> <span class="k">where</span> <span class="k">not</span> <span class="n">is_cancelled</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="用as-重命名列名">用<code class="highlighter-rouge">as</code> 重命名列名</h3>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="c1">-- Good</span>
<span class="k">select</span>
    <span class="n">id</span><span class="p">,</span>
    <span class="n">email</span><span class="p">,</span>
    <span class="n">timestamp_trunc</span><span class="p">(</span><span class="n">created_at</span><span class="p">,</span> <span class="k">month</span><span class="p">)</span> <span class="k">as</span> <span class="n">signup_month</span>
<span class="k">from</span> <span class="n">users</span>

<span class="c1">-- Bad</span>
<span class="k">select</span>
    <span class="n">id</span><span class="p">,</span>
    <span class="n">email</span><span class="p">,</span>
    <span class="n">timestamp_trunc</span><span class="p">(</span><span class="n">created_at</span><span class="p">,</span> <span class="k">month</span><span class="p">)</span> <span class="n">signup_month</span>
<span class="k">from</span> <span class="n">users</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="group-by-时写出列名而不要用序号"><code class="highlighter-rouge">group by</code> 时写出列名而不要用序号</h3>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="c1">-- Good</span>
<span class="k">select</span> <span class="n">user_id</span><span class="p">,</span> <span class="k">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">as</span> <span class="n">total_charges</span>
<span class="k">from</span> <span class="n">charges</span>
<span class="k">group</span> <span class="k">by</span> <span class="n">user_id</span>

<span class="c1">-- Bad</span>
<span class="k">select</span>
    <span class="n">user_id</span><span class="p">,</span>
    <span class="k">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">as</span> <span class="n">total_charges</span>
<span class="k">from</span> <span class="n">charges</span>
<span class="k">group</span> <span class="k">by</span> <span class="mi">1</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="分组的列首先显示出来">分组的列首先显示出来</h3>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="c1">-- Good</span>
<span class="k">select</span>
  <span class="n">timestamp_trunc</span><span class="p">(</span><span class="n">com_created_at</span><span class="p">,</span> <span class="nb">year</span><span class="p">)</span> <span class="k">as</span> <span class="n">signup_year</span><span class="p">,</span>
  <span class="k">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">as</span> <span class="n">total_companies</span>
<span class="k">from</span> <span class="n">companies</span>
<span class="k">group</span> <span class="k">by</span> <span class="n">signup_year</span>

<span class="c1">-- Bad</span>
<span class="k">select</span>
  <span class="k">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">as</span> <span class="n">total_companies</span><span class="p">,</span>
  <span class="n">timestamp_trunc</span><span class="p">(</span><span class="n">com_created_at</span><span class="p">,</span> <span class="nb">year</span><span class="p">)</span> <span class="k">as</span> <span class="n">signup_year</span>
<span class="k">from</span> <span class="n">companies</span>
<span class="k">group</span> <span class="k">by</span> <span class="n">signup_year</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="调整对齐case-when语句">调整对齐case-when语句</h3>
<p>每个<code class="highlighter-rouge">when</code>应该在它自己的行上(<code class="highlighter-rouge">case</code>行上没有任何内容)，并且应该比<code class="highlighter-rouge">case</code>行缩进更深一层。<code class="highlighter-rouge">then</code>可以在同一条线上，也可以在它下面的自己的线上。</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="rouge-code"><pre><span class="c1">-- Good</span>
<span class="k">select</span>
    <span class="k">case</span>
        <span class="k">when</span> <span class="n">event_name</span> <span class="o">=</span> <span class="s1">'viewed_homepage'</span> <span class="k">then</span> <span class="s1">'Homepage'</span>
        <span class="k">when</span> <span class="n">event_name</span> <span class="o">=</span> <span class="s1">'viewed_editor'</span> <span class="k">then</span> <span class="s1">'Editor'</span>
    <span class="k">end</span> <span class="k">as</span> <span class="n">page_name</span>
<span class="k">from</span> <span class="n">events</span>

<span class="c1">-- Good too</span>
<span class="k">select</span>
    <span class="k">case</span>
        <span class="k">when</span> <span class="n">event_name</span> <span class="o">=</span> <span class="s1">'viewed_homepage'</span>
            <span class="k">then</span> <span class="s1">'Homepage'</span>
        <span class="k">when</span> <span class="n">event_name</span> <span class="o">=</span> <span class="s1">'viewed_editor'</span>
            <span class="k">then</span> <span class="s1">'Editor'</span>
    <span class="k">end</span> <span class="k">as</span> <span class="n">page_name</span>
<span class="k">from</span> <span class="n">events</span>

<span class="c1">-- Bad </span>
<span class="k">select</span>
    <span class="k">case</span> <span class="k">when</span> <span class="n">event_name</span> <span class="o">=</span> <span class="s1">'viewed_homepage'</span> <span class="k">then</span> <span class="s1">'Homepage'</span>
        <span class="k">when</span> <span class="n">event_name</span> <span class="o">=</span> <span class="s1">'viewed_editor'</span> <span class="k">then</span> <span class="s1">'Editor'</span>
    <span class="k">end</span> <span class="k">as</span> <span class="n">page_name</span>
<span class="k">from</span> <span class="n">events</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="尽量使用ctes-避免使用子查询">尽量使用CTEs, 避免使用子查询</h3>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
</pre></td><td class="rouge-code"><pre><span class="c1">-- Good</span>
<span class="k">with</span> <span class="n">ordered_details</span> <span class="k">as</span> <span class="p">(</span>

    <span class="k">select</span>
        <span class="n">user_id</span><span class="p">,</span>
        <span class="n">name</span><span class="p">,</span>
        <span class="n">row_number</span><span class="p">()</span> <span class="n">over</span> <span class="p">(</span><span class="n">partition</span> <span class="k">by</span> <span class="n">user_id</span> <span class="k">order</span> <span class="k">by</span> <span class="n">date_updated</span> <span class="k">desc</span><span class="p">)</span> <span class="k">as</span> <span class="n">details_rank</span>
    <span class="k">from</span> <span class="n">billingdaddy</span><span class="p">.</span><span class="n">billing_stored_details</span>

<span class="p">),</span>

<span class="k">final</span> <span class="k">as</span> <span class="p">(</span>

    <span class="k">select</span> <span class="n">user_id</span><span class="p">,</span> <span class="n">name</span>
    <span class="k">from</span> <span class="n">ordered_details</span>
    <span class="k">where</span> <span class="n">details_rank</span> <span class="o">=</span> <span class="mi">1</span>

<span class="p">)</span>

<span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="k">final</span>

<span class="c1">-- Bad</span>
<span class="k">select</span> <span class="n">user_id</span><span class="p">,</span> <span class="n">name</span>
<span class="k">from</span> <span class="p">(</span>
    <span class="k">select</span>
        <span class="n">user_id</span><span class="p">,</span>
        <span class="n">name</span><span class="p">,</span>
        <span class="n">row_number</span><span class="p">()</span> <span class="n">over</span> <span class="p">(</span><span class="n">partition</span> <span class="k">by</span> <span class="n">user_id</span> <span class="k">order</span> <span class="k">by</span> <span class="n">date_updated</span> <span class="k">desc</span><span class="p">)</span> <span class="k">as</span> <span class="n">details_rank</span>
    <span class="k">from</span> <span class="n">billingdaddy</span><span class="p">.</span><span class="n">billing_stored_details</span>
<span class="p">)</span> <span class="n">ranked</span>
<span class="k">where</span> <span class="n">details_rank</span> <span class="o">=</span> <span class="mi">1</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="使用有意义的cte名称">使用有意义的CTE名称</h3>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="c1">-- Good</span>
<span class="k">with</span> <span class="n">ordered_details</span> <span class="k">as</span> <span class="p">(</span>

<span class="c1">-- Bad</span>
<span class="k">with</span> <span class="n">d1</span> <span class="k">as</span> <span class="p">(</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="使用over函数">使用over()函数</h3>
<p>你可以把它放在同一行上，也可以根据它的长度把它分成多行:</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="c1">-- Good</span>
<span class="k">select</span>
    <span class="n">user_id</span><span class="p">,</span>
    <span class="n">name</span><span class="p">,</span>
    <span class="n">row_number</span><span class="p">()</span> <span class="n">over</span> <span class="p">(</span><span class="n">partition</span> <span class="k">by</span> <span class="n">user_id</span> <span class="k">order</span> <span class="k">by</span> <span class="n">date_updated</span> <span class="k">desc</span><span class="p">)</span> <span class="k">as</span> <span class="n">details_rank</span>
<span class="k">from</span> <span class="n">billingdaddy</span><span class="p">.</span><span class="n">billing_stored_details</span>

<span class="c1">-- Good</span>
<span class="k">select</span>
    <span class="n">user_id</span><span class="p">,</span>
    <span class="n">name</span><span class="p">,</span>
    <span class="n">row_number</span><span class="p">()</span> <span class="n">over</span> <span class="p">(</span>
        <span class="n">partition</span> <span class="k">by</span> <span class="n">user_id</span>
        <span class="k">order</span> <span class="k">by</span> <span class="n">date_updated</span> <span class="k">desc</span>
    <span class="p">)</span> <span class="k">as</span> <span class="n">details_rank</span>
<span class="k">from</span> <span class="n">billingdaddy</span><span class="p">.</span><span class="n">billing_stored_details</span>
</pre></td></tr></tbody></table></code></pre></div></div>
:ET